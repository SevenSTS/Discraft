import discord
from discord.ext import commands
from mcrcon import MCRcon
import os
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
MCRCON_HOST = os.getenv("MCRCON_HOST")
MCRCON_PORT = int(os.getenv("MCRCON_PORT"))
MCRCON_PASSWORD = os.getenv("MCRCON_PASSWORD")

# V√©rification des variables d'environnement
if not TOKEN or not MCRCON_HOST or not MCRCON_PORT or not MCRCON_PASSWORD:
    print("‚ùå Erreur : Une ou plusieurs variables d'environnement sont manquantes.")
    exit(1)

# Configuration du bot
intents = discord.Intents.default()
intents.message_content = True  # Important pour lire les commandes !
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f"‚úÖ Bot connect√© en tant que {bot.user}")

@bot.command()
async def mc(ctx, *, commande):
    """Ex√©cute une commande sur le serveur Minecraft via RCON."""
    
    # V√©rifier si l'utilisateur a le r√¥le "Admin" ou un r√¥le sp√©cifique
    if not any(role.name == "¬ª H. Administration" for role in ctx.author.roles):  # Remplace "Admin" par le r√¥le voulu
        await ctx.send("‚ùå Vous devez avoir le r√¥le Admin pour utiliser cette commande.")
        return
    
    print(f"üì© Commande Discord re√ßue : {commande}")  # Log dans la console
    
    try:
        print("üîå Tentative de connexion √† RCON...")
        with MCRcon(MCRCON_HOST, MCRCON_PASSWORD, MCRCON_PORT) as mcr:
            print("‚úÖ Connexion RCON r√©ussie !")
            response = mcr.command(commande)
            print(f"üìù R√©ponse du serveur : {response}")
        await ctx.send(f"‚úÖ Commande ex√©cut√©e : `{commande}`\nüìù R√©ponse: {response}")
    except Exception as e:
        print(f"‚ùå Erreur : {e}")  # Voir l'erreur exacte dans la console
        await ctx.send(f"‚ùå Erreur lors de l'ex√©cution : {e}")

bot.run(TOKEN)
